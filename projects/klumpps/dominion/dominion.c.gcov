        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 240 returned 100% blocks executed 83%
      240:    8:int compare(const void* a, const void* b) {
      240:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      240:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       64:   12:    return -1;
      176:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10) {
    #####:   22:  int* k = malloc(10 * sizeof(int));
    #####:   23:  k[0] = k1;
    #####:   24:  k[1] = k2;
    #####:   25:  k[2] = k3;
    #####:   26:  k[3] = k4;
    #####:   27:  k[4] = k5;
    #####:   28:  k[5] = k6;
    #####:   29:  k[6] = k7;
    #####:   30:  k[7] = k8;
    #####:   31:  k[8] = k9;
    #####:   32:  k[9] = k10;
    #####:   33:  return k;
        -:   34:}
        -:   35:
function initializeGame called 8 returned 100% blocks executed 88%
        8:   36:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   37:
        -:   38:  int i;
        -:   39:  int j;
        -:   40:  int it;			
        -:   41:  //set up random number generator
        8:   42:  SelectStream(1);
call    0 returned 100%
        8:   43:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   44:  
        -:   45:  //check number of players
        8:   46:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   47:    {
    #####:   48:      return -1;
        -:   49:    }
        -:   50:
        -:   51:  //set number of players
        8:   52:  state->numPlayers = numPlayers;
        -:   53:
        -:   54:  //check selected kingdom cards are different
       88:   55:  for (i = 0; i < 10; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      880:   56:      for (j = 0; j < 10; j++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      800:   57:	      if (j != i && kingdomCards[j] == kingdomCards[i]){
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   58:	        return -1;
        -:   59:	      }
        -:   60:      }
        -:   61:  }
        -:   62:
        -:   63:
        -:   64:  //initialize supply
        -:   65:  ///////////////////////////////
        -:   66:
        -:   67:  //set number of Curse cards
        8:   68:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   69:    {
        8:   70:      state->supplyCount[curse] = 10;
        -:   71:    }
    #####:   72:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   73:    {
    #####:   74:      state->supplyCount[curse] = 20;
        -:   75:    }
        -:   76:  else
        -:   77:    {
    #####:   78:      state->supplyCount[curse] = 30;
        -:   79:    }
        -:   80:
        -:   81:  //set number of Victory cards
        8:   82:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   83:    {
        8:   84:      state->supplyCount[estate] = 8;
        8:   85:      state->supplyCount[duchy] = 8;
        8:   86:      state->supplyCount[province] = 8;
        -:   87:    }
        -:   88:  else
        -:   89:    {
    #####:   90:      state->supplyCount[estate] = 12;
    #####:   91:      state->supplyCount[duchy] = 12;
    #####:   92:      state->supplyCount[province] = 12;
        -:   93:    }
        -:   94:
        -:   95:  //set number of Treasure cards
        8:   96:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:   97:  state->supplyCount[silver] = 40;
        8:   98:  state->supplyCount[gold] = 30;
        -:   99:
        -:  100:  //set number of Kingdom cards
      168:  101:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  102:  {
     1320:  103:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  104:	    {
     1240:  105:	      if (kingdomCards[j] == i){
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  106:	        //check if card is a 'Victory' Kingdom card
       80:  107:	        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens){
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
       32:  108:		        if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       16:  109:		          state->supplyCount[i] = 8; 
        -:  110:		        }
    #####:  111:		        else{ state->supplyCount[i] = 12; }
        -:  112:		      }
        -:  113:	        else{
       64:  114:		        state->supplyCount[i] = 10;
        -:  115:		      }
       80:  116:	        break;
        -:  117:	      }
        -:  118:	      else    //card is not in the set choosen for the game
        -:  119:	      {
     1160:  120:	      state->supplyCount[i] = -1;
        -:  121:	      }
        -:  122:	    }
        -:  123:
        -:  124:  }
        -:  125:
        -:  126:  ////////////////////////
        -:  127:  //supply intilization complete
        -:  128:
        -:  129:  //set player decks
       24:  130:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  131:    {
       16:  132:      state->deckCount[i] = 0;
       64:  133:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  134:	{
       48:  135:	  state->deck[i][j] = estate;
       48:  136:	  state->deckCount[i]++;
        -:  137:	}
      128:  138:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  139:	{
      112:  140:	  state->deck[i][j] = copper;
      112:  141:	  state->deckCount[i]++;		
        -:  142:	}
        -:  143:    }
        -:  144:
        -:  145:  //shuffle player decks
       24:  146:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  147:    {
       16:  148:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  149:	{
    #####:  150:	  return -1;
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //draw player hands
       24:  155:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  156:    {  
        -:  157:      //initialize hand size to zero
       16:  158:      state->handCount[i] = 0;
       16:  159:      state->discardCount[i] = 0;
        -:  160:      //draw 5 cards
        -:  161:      // for (j = 0; j < 5; j++)
        -:  162:      //	{
        -:  163:      //	  drawCard(i, state);
        -:  164:      //	}
        -:  165:    }
        -:  166:  
        -:  167:  //set embargo tokens to 0 for all supply piles
      224:  168:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  169:    {
      216:  170:      state->embargoTokens[i] = 0;
        -:  171:    }
        -:  172:
        -:  173:  //initialize first player's turn
        8:  174:  state->outpostPlayed = 0;
        8:  175:  state->phase = 0;
        8:  176:  state->numActions = 1;
        8:  177:  state->numBuys = 1;
        8:  178:  state->playedCardCount = 0;
        8:  179:  state->whoseTurn = 0;
        8:  180:  state->handCount[state->whoseTurn] = 0;
        -:  181:  //int it; move to top
        -:  182:
        -:  183:  //Moved draw cards to here, only drawing at the start of a turn
       48:  184:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  185:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  186:  }
        -:  187:
        8:  188:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  189:
        8:  190:  return 0;
        -:  191:}
        -:  192:
function shuffle called 32 returned 100% blocks executed 100%
       32:  193:int shuffle(int player, struct gameState *state) {
        -:  194: 
        -:  195:
        -:  196:  int newDeck[MAX_DECK];
       32:  197:  int newDeckPos = 0;
        -:  198:  int card;
        -:  199:  int i;
        -:  200:
       32:  201:  if (state->deckCount[player] < 1)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
       14:  202:    return -1;
       18:  203:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  204:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  205:
      198:  206:  while (state->deckCount[player] > 0) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      162:  207:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      162:  208:    newDeck[newDeckPos] = state->deck[player][card];
      162:  209:    newDeckPos++;
      562:  210:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      400:  211:      state->deck[player][i] = state->deck[player][i+1];
        -:  212:    }
      162:  213:    state->deckCount[player]--;
        -:  214:  }
      180:  215:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      162:  216:    state->deck[player][i] = newDeck[i];
      162:  217:    state->deckCount[player]++;
        -:  218:  }
        -:  219:
       18:  220:  return 0;
        -:  221:}
        -:  222:
function playCard called 0 returned 0% blocks executed 0%
    #####:  223:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {	
        -:  224:  int card;
    #####:  225:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  226:
        -:  227:  //check if it is the right phase
    #####:  228:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  229:    {
    #####:  230:      return -1;
        -:  231:    }
        -:  232:	
        -:  233:  //check if player has enough actions
    #####:  234:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  235:    {
    #####:  236:      return -1;
        -:  237:    }
        -:  238:	
        -:  239:  //get card played
    #####:  240:  card = handCard(handPos, state);
call    0 never executed
        -:  241:	
        -:  242:  //check if selected card is an action
    #####:  243:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //play card
    #####:  249:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //reduce number of actions
    #####:  255:  state->numActions--;
        -:  256:
        -:  257:  //update coins (Treasure cards may be added with card draws)
    #####:  258:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  259:	
    #####:  260:  return 0;
        -:  261:}
        -:  262:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  263:int buyCard(int supplyPos, struct gameState *state) {
        -:  264:  int who;
        -:  265:  if (DEBUG){
        -:  266:    printf("Entering buyCard...\n");
        -:  267:  }
        -:  268:
        -:  269:  // I don't know what to do about the phase thing.
        -:  270:
    #####:  271:  who = state->whoseTurn;
        -:  272:
    #####:  273:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  274:    if (DEBUG)
        -:  275:      printf("You do not have any buys left\n");
    #####:  276:    return -1;
        -:  277:  } 
    #####:  278:  else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  279:    if (DEBUG)
        -:  280:      printf("There are not any of that type of card left\n");
    #####:  281:    return -1;
        -:  282:  } 
    #####:  283:  else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  284:    if (DEBUG) 
        -:  285:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  286:    return -1;
        -:  287:  } 
        -:  288:  else {
    #####:  289:    state->phase=1;
        -:  290:    //state->supplyCount[supplyPos]--;
    #####:  291:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  292:  
    #####:  293:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  294:    state->numBuys--;
        -:  295:    if (DEBUG)
        -:  296:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  297:  }
        -:  298:
        -:  299:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  300:  //state->discardCount[who]++;
        -:  301:    
    #####:  302:  return 0;
        -:  303:}
        -:  304:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  305:int numHandCards(struct gameState *state) {
    #####:  306:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  307:}
        -:  308:
function handCard called 0 returned 0% blocks executed 0%
    #####:  309:int handCard(int handPos, struct gameState *state) {
    #####:  310:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  311:  return state->hand[currentPlayer][handPos];
        -:  312:}
        -:  313:
function supplyCount called 108 returned 100% blocks executed 100%
      108:  314:int supplyCount(int card, struct gameState *state) {
      108:  315:  return state->supplyCount[card];
        -:  316:}
        -:  317:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  318:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  319:  int i;
    #####:  320:  int count = 0;
        -:  321:
    #####:  322:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  323:    {
    #####:  324:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  325:    }
        -:  326:
    #####:  327:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  328:    {
    #####:  329:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  335:    }
        -:  336:
    #####:  337:  return count;
        -:  338:}
        -:  339:
function whoseTurn called 6 returned 100% blocks executed 100%
        6:  340:int whoseTurn(struct gameState *state) {
        6:  341:  return state->whoseTurn;
        -:  342:}
        -:  343:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  344:int endTurn(struct gameState *state) {
        -:  345:  int k;
        -:  346:  int i;
    #####:  347:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  348:  
        -:  349:  //Discard hand
    #####:  350:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  351:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  352:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  353:  }
    #####:  354:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  355:    
        -:  356:  //Code for determining the player
    #####:  357:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  358:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  359:  }
        -:  360:  else{
    #####:  361:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  362:  }
        -:  363:
    #####:  364:  state->outpostPlayed = 0;
    #####:  365:  state->phase = 0;
    #####:  366:  state->numActions = 1;
    #####:  367:  state->coins = 0;
    #####:  368:  state->numBuys = 1;
    #####:  369:  state->playedCardCount = 0;
    #####:  370:  state->handCount[state->whoseTurn] = 0;
        -:  371:
        -:  372:  //int k; move to top
        -:  373:  //Next player draws hand
    #####:  374:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  375:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  376:  }
        -:  377:
        -:  378:  //Update money
    #####:  379:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  380:
    #####:  381:  return 0;
        -:  382:}
        -:  383:
function isGameOver called 21 returned 100% blocks executed 100%
       21:  384:int isGameOver(struct gameState *state) {
        -:  385:  int i;
        -:  386:  int j;
        -:  387:	
        -:  388:  //if stack of Province cards is empty, the game ends
       21:  389:  if (state->supplyCount[province] == 0){
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        1:  390:      return 1;
        -:  391:  }
        -:  392:
        -:  393:  //if three supply pile are at 0, the game ends
       20:  394:  j = 0;
      520:  395:  for (i = 0; i < 25; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      500:  396:      if (state->supplyCount[i] == 0){
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       15:  397:	      j++;
        -:  398:	    }
        -:  399:  }
       20:  400:  if ( j >= 3){
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        3:  401:      return 1;
        -:  402:  }
        -:  403:
       17:  404:  return 0;
        -:  405:}
        -:  406:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  407:int scoreFor (int player, struct gameState *state) {
        -:  408:
        -:  409:  int i;
    #####:  410:  int score = 0;
        -:  411:  //score from hand
    #####:  412:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  413:    {
    #####:  414:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  415:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  416:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  417:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  418:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  419:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  420:    }
        -:  421:
        -:  422:  //score from discard
    #####:  423:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  424:    {
    #####:  425:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  431:    }
        -:  432:
        -:  433:  //score from deck
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  435:    {
    #####:  436:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  442:    }
        -:  443:
    #####:  444:  return score;
        -:  445:}
        -:  446:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  447:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  448:  int i;	
        -:  449:  int j;
        -:  450:  int highScore;
        -:  451:  int currentPlayer;
        -:  452:
        -:  453:  //get score for each player
    #####:  454:  for (i = 0; i < MAX_PLAYERS; i++){
branch  0 never executed
branch  1 never executed
        -:  455:      //set unused player scores to -9999
    #####:  456:      if (i >= state->numPlayers){
branch  0 never executed
branch  1 never executed
    #####:  457:	      players[i] = -9999;
        -:  458:	    }
        -:  459:      else{
    #####:  460:	      players[i] = scoreFor (i, state);
call    0 never executed
        -:  461:	    }
        -:  462:  }
        -:  463:
        -:  464:  //find highest score
    #####:  465:  j = 0;
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++){
branch  0 never executed
branch  1 never executed
    #####:  467:      if (players[i] > players[j]){
branch  0 never executed
branch  1 never executed
    #####:  468:	      j = i;
        -:  469:	    }
        -:  470:  }
    #####:  471:  highScore = players[j];
        -:  472:
        -:  473:  //add 1 to players who had less turns
    #####:  474:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  475:  for (i = 0; i < MAX_PLAYERS; i++){
branch  0 never executed
branch  1 never executed
    #####:  476:      if ( players[i] == highScore && i > currentPlayer ){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  477:	      players[i]++;
        -:  478:	    }
        -:  479:  }
        -:  480:
        -:  481:  //find new highest score
    #####:  482:  j = 0;
    #####:  483:  for (i = 0; i < MAX_PLAYERS; i++){
branch  0 never executed
branch  1 never executed
    #####:  484:      if ( players[i] > players[j] ){
branch  0 never executed
branch  1 never executed
    #####:  485:	      j = i;
        -:  486:	    }
        -:  487:  }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //set winners in array to 1 and rest to 0
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++){
branch  0 never executed
branch  1 never executed
    #####:  492:      if ( players[i] == highScore ){
branch  0 never executed
branch  1 never executed
    #####:  493:	      players[i] = 1;
        -:  494:	    }
        -:  495:      else{
    #####:  496:	      players[i] = 0;
        -:  497:	    }
        -:  498:  }
        -:  499:
    #####:  500:  return 0;
        -:  501:}
        -:  502:
function drawCard called 66 returned 100% blocks executed 100%
       66:  503:int drawCard(int player, struct gameState *state){
        -:  504:  int count;
        -:  505:  int deckCounter;
       66:  506:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -:  507:    
        -:  508:    //Step 1 Shuffle the discard pile back into a deck
        -:  509:    int i;
        -:  510:    //Move discard to deck
       10:  511:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 20%
branch  1 taken 80% (fallthrough)
        2:  512:      state->deck[player][i] = state->discard[player][i];
        2:  513:      state->discard[player][i] = -1;
        -:  514:    }
        -:  515:
        8:  516:    state->deckCount[player] = state->discardCount[player];
        8:  517:    state->discardCount[player] = 0;//Reset discard
        -:  518:
        -:  519:    //Shufffle the deck
        8:  520:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  521:   
        -:  522:    if (DEBUG){//Debug statements
        -:  523:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  524:    }
        -:  525:    
        8:  526:    state->discardCount[player] = 0;
        -:  527:
        -:  528:    //Step 2 Draw Card
        8:  529:    count = state->handCount[player];//Get current player's hand count
        -:  530:    
        -:  531:    if (DEBUG){//Debug statements
        -:  532:      printf("Current hand count: %d\n", count);
        -:  533:    }
        -:  534:    
        8:  535:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  536:
        8:  537:    if (deckCounter == 0)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        6:  538:      return -1;
        -:  539:
        2:  540:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  541:    state->deckCount[player]--;
        2:  542:    state->handCount[player]++;//Increment hand count
        -:  543:  }
        -:  544:
        -:  545:  else{
       58:  546:    int count = state->handCount[player];//Get current hand count for player
        -:  547:    int deckCounter;
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Current hand count: %d\n", count);
        -:  550:    }
        -:  551:
       58:  552:    deckCounter = state->deckCount[player];//Create holder for the deck count
       58:  553:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       58:  554:    state->deckCount[player]--;
       58:  555:    state->handCount[player]++;//Increment hand count
        -:  556:  }
        -:  557:
       60:  558:  return 0;
        -:  559:}
        -:  560:
function getCost called 29 returned 100% blocks executed 100%
       29:  561:int getCost(int cardNumber){
        -:  562:  
       29:  563:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 3%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 7%
        -:  564:    {
        -:  565:    case curse: //enum 0
        1:  566:      return 0;
        -:  567:    case estate: //enum 1
        1:  568:      return 2;
        -:  569:    case duchy: //enum 2
        1:  570:      return 5;
        -:  571:    case province: //enum 3
        1:  572:      return 8;
        -:  573:    case copper: //enum 4
        1:  574:      return 0;
        -:  575:    case silver: //enum 5
        1:  576:      return 3;
        -:  577:    case gold: //enum 6
        1:  578:      return 6;
        -:  579:    case adventurer: //enum 7
        1:  580:      return 6;
        -:  581:    case council_room: //enum 8
        1:  582:      return 5;
        -:  583:    case feast: //enum 9
        1:  584:      return 4;
        -:  585:    case gardens: //enum 10
        1:  586:      return 4;
        -:  587:    case mine: //enum 11
        1:  588:      return 5;
        -:  589:    case remodel: //enum 12
        1:  590:      return 4;
        -:  591:    case smithy: //enum 13
        1:  592:      return 4;
        -:  593:    case village: //enum 14
        1:  594:      return 3;
        -:  595:    case baron: //enum 15
        1:  596:      return 4;
        -:  597:    case great_hall: //enum 16
        1:  598:      return 3;
        -:  599:    case minion: //enum 17
        1:  600:      return 5;
        -:  601:    case steward: //enum 18
        1:  602:      return 3;
        -:  603:    case tribute: //enum 19
        1:  604:      return 5;
        -:  605:    case ambassador: //enum 20
        1:  606:      return 3;
        -:  607:    case cutpurse: //enum 21
        1:  608:      return 4;
        -:  609:    case embargo:  //enum 22
        1:  610:      return 2;
        -:  611:    case outpost: //enum 23
        1:  612:      return 5;
        -:  613:    case salvager: //enum 24
        1:  614:      return 4;
        -:  615:    case sea_hag: //enum 25
        1:  616:      return 4;
        -:  617:    case treasure_map: //enum 26
        1:  618:      return 4;
        -:  619:    }
        -:  620:	
        2:  621:  return -1;
        -:  622:}
        -:  623:
function cardEffect called 6 returned 100% blocks executed 6%
        6:  624:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  625:  
        -:  626:  int i;
        -:  627:  int j;
        -:  628:  int k;
        -:  629:  int x;
        -:  630:  int index;
        6:  631:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6:  632:  int nextPlayer = currentPlayer + 1;
        -:  633:
        6:  634:  int tributeRevealedCards[2] = {-1, -1};
        -:  635:  int temphand[MAX_HAND];// moved above the if statement
        6:  636:  int drawntreasure=0;
        -:  637:  int cardDrawn;
        6:  638:  int z = 0;// this is the counter for the temp hand
        6:  639:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  640:    nextPlayer = 0;
        -:  641:  }
        -:  642:  
        -:  643:	
        -:  644:  //uses switch to select card and perform actions
        6:  645:  switch( card ) 
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 17%
branch  7 taken 17%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 17%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  646:    {
        -:  647:    case adventurer: ;
        3:  648:      int adventurerReturn = adventurerFunc(state, z, drawntreasure, currentPlayer, temphand, handPos);
call    0 returned 100%
        3:  649:      return adventurerReturn;
        -:  650:      break;
        -:  651:    
        -:  652:      /*Original adventurer code will replace when done
        -:  653:      while(drawntreasure<2){
        -:  654:	      if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  655:	      shuffle(currentPlayer, state);
        -:  656:	      }
        -:  657:	      
        -:  658:	      drawCard(currentPlayer, state);
        -:  659:	      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  660:	      
        -:  661:	      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
        -:  662:	        drawntreasure++;
        -:  663:	      }
        -:  664:	      else{
        -:  665:	      temphand[z]=cardDrawn;
        -:  666:	      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  667:	      z++;
        -:  668:	      }
        -:  669:	      
        -:  670:      }
        -:  671:      while(z-1>=0){
        -:  672:	      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  673:	      z=z-1;
        -:  674:      }
        -:  675:      
        -:  676:      //put played card in played card pile
        -:  677:      discardCard(handPos, currentPlayer, state, 0);
        -:  678:      
        -:  679:      return 0;
        -:  680:      */
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
    #####:  684:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  685:	    {
    #####:  686:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  687:	    }
        -:  688:			
        -:  689:      //+1 Buy
    #####:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
    #####:  693:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  694:	    {
    #####:  695:	      if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  696:	      {
    #####:  697:	      drawCard(i, state);
call    0 never executed
        -:  698:	      }
        -:  699:	    }
        -:  700:			
        -:  701:      //put played card in played card pile
    #####:  702:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  703:			
    #####:  704:      return 0;
        -:  705:			
        -:  706:    case feast:
        -:  707:      //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  710:	      temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	      state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  719:	      if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  720:	        if (DEBUG)
        -:  721:	        printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	        if (DEBUG){
        -:  724:	        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	        }
        -:  726:	      }
    #####:  727:	     else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  728:	        printf("That card is too expensive!\n");
call    0 never executed
        -:  729:
        -:  730:	       if (DEBUG){
        -:  731:	          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	        }
        -:  733:	      }
        -:  734:	      else{
        -:  735:
        -:  736:	        if (DEBUG){
        -:  737:	          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	        }
        -:  739:
    #####:  740:	        gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  741:	        x = 0;//No more buying cards
        -:  742:
        -:  743:	        if (DEBUG){
        -:  744:	        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	        }
        -:  746:
        -:  747:	      }
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  752:	      state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	      temphand[i] = -1;
        -:  754:      }
        -:  755:      //Reset Hand
        -:  756:      			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case gardens:
    #####:  760:      return -1;
        -:  761:			
        -:  762:    case mine:
    #####:  763:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
    #####:  765:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  766:	    {
    #####:  767:	      return -1;
        -:  768:	    }
        -:  769:		
    #####:  770:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  771:	    {
    #####:  772:	      return -1;
        -:  773:	    }
        -:  774:
    #####:  775:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  776:	    {
    #####:  777:	      return -1;
        -:  778:	    }
        -:  779:
    #####:  780:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  781:
        -:  782:      //discard card from hand
    #####:  783:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  784:
        -:  785:      //discard trashed card
    #####:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:	      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  789:	      {
    #####:  790:	        discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  791:	        break;
        -:  792:	      }
        -:  793:	    }
        -:  794:			
    #####:  795:      return 0;
        -:  796:			
        -:  797:    case remodel:
    #####:  798:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  801:	    {
    #####:  802:	      return -1;
        -:  803:	    }
        -:  804:
    #####:  805:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  809:
        -:  810:      //discard trashed card
    #####:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  812:	    {
    #####:  813:	      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  814:	      {
    #####:  815:	        discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  816:	        break;
        -:  817:	      }
        -:  818:	    }
        -:  819:
        -:  820:
    #####:  821:      return 0;
        -:  822:		
        -:  823:    case smithy: ;
        1:  824:      int smithyReturn = smithyFunc(state, handPos, currentPlayer);
call    0 returned 100%
        1:  825:      return smithyReturn;
        -:  826:      break;
        -:  827:    
        -:  828:      /*old smithy will delete when done
        -:  829:      //+3 Cards
        -:  830:      for (i = 0; i < 3; i++)
        -:  831:	    {
        -:  832:	      drawCard(currentPlayer, state);
        -:  833:	    }
        -:  834:			
        -:  835:      //discard card from hand
        -:  836:      discardCard(handPos, currentPlayer, state, 0);
        -:  837:      return 0;
        -:  838:      */
        -:  839:		
        -:  840:    case village: ;
        1:  841:      int villageReturn = villageFunc(state, handPos, bonus, currentPlayer);
call    0 returned 100%
        1:  842:      return villageReturn;
        -:  843:      break;
        -:  844:      
        -:  845:      /*old village code
        -:  846:      //+1 Card
        -:  847:      drawCard(currentPlayer, state);
        -:  848:			
        -:  849:      //+2 Actions
        -:  850:      state->numActions = state->numActions + 2;
        -:  851:			
        -:  852:      //discard played card from hand
        -:  853:      discardCard(handPos, currentPlayer, state, 0);
        -:  854:      return 0;
        -:  855:		  */
        -:  856:		
        -:  857:    case baron:
    #####:  858:      state->numBuys++;//Increase buys by 1!
    #####:  859:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  860:	      int p = 0;//Iterator for hand!
    #####:  861:	      int card_not_discarded = 1;//Flag for discard set!
    #####:  862:	      while(card_not_discarded){
branch  0 never executed
branch  1 never executed
        -:  863:	        
    #####:  864:	          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  865:	              state->coins += 4;//Add 4 coins to the amount of coins
    #####:  866:	              state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  867:	              state->discardCount[currentPlayer]++;
    #####:  868:	          for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  869:	              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  870:	            }
    #####:  871:	            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  872:	            state->handCount[currentPlayer]--;
    #####:  873:	            card_not_discarded = 0;//Exit the loop
        -:  874:	          }
        -:  875:	        
    #####:  876:	         else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  877:	           if(DEBUG) {
        -:  878:	             printf("No estate cards in your hand, invalid choice\n");
        -:  879:	              printf("Must gain an estate if there are any\n");
        -:  880:	           }
    #####:  881:	           if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  882:	             gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  883:	             state->supplyCount[estate]--;//Decrement estates
    #####:  884:	              if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  885:		              isGameOver(state);
call    0 never executed
        -:  886:	              }
        -:  887:	            }
    #####:  888:	            card_not_discarded = 0;//Exit the loop
        -:  889:	          }
        -:  890:			    
        -:  891:	       else{
    #####:  892:	            p++;//Next card
        -:  893:	        }
        -:  894:	      }
        -:  895:      }
        -:  896:			    
        -:  897:      else{
    #####:  898:	      if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  899:	        gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  900:	        state->supplyCount[estate]--;//Decrement Estates
        -:  901:	        
    #####:  902:	        if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  903:	        isGameOver(state);
call    0 never executed
        -:  904:	        }
        -:  905:	      }
        -:  906:      }
        -:  907:	    
        -:  908:      
    #####:  909:      return 0;
        -:  910:		
        -:  911:    case great_hall:
        -:  912:      //+1 Card
    #####:  913:      drawCard(currentPlayer, state);
call    0 never executed
        -:  914:			
        -:  915:      //+1 Actions
    #####:  916:      state->numActions++;
        -:  917:			
        -:  918:      //discard card from hand
    #####:  919:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  920:      return 0;
        -:  921:		
        -:  922:    case minion: ;
    #####:  923:      int minionReturn = minionFunc(choice1, choice2, state, handPos, currentPlayer, i, j);
call    0 never executed
    #####:  924:      return minionReturn;
        -:  925:      break;
        -:  926:    
        -:  927:    /*original minion code
        -:  928:      //+1 action
        -:  929:      state->numActions++;
        -:  930:			
        -:  931:      //discard card from hand
        -:  932:      discardCard(handPos, currentPlayer, state, 0);
        -:  933:			
        -:  934:      if (choice1)		//+2 coins
        -:  935:	    {
        -:  936:	      state->coins = state->coins + 2;
        -:  937:	    }
        -:  938:			
        -:  939:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  940:	      {
        -:  941:	        //discard hand
        -:  942:	      while(numHandCards(state) > 0)
        -:  943:	        {
        -:  944:	          discardCard(handPos, currentPlayer, state, 0);
        -:  945:	        }
        -:  946:				
        -:  947:	      //draw 4
        -:  948:	      for (i = 0; i < 4; i++)
        -:  949:	        {
        -:  950:	          drawCard(currentPlayer, state);
        -:  951:	        }
        -:  952:				
        -:  953:	      //other players discard hand and redraw if hand size > 4
        -:  954:	      for (i = 0; i < state->numPlayers; i++)
        -:  955:	      {
        -:  956:	        if (i != currentPlayer)
        -:  957:		      {
        -:  958:		        if ( state->handCount[i] > 4 )
        -:  959:		        {
        -:  960:		        //discard hand
        -:  961:		          while( state->handCount[i] > 0 )
        -:  962:			        {
        -:  963:			          discardCard(handPos, i, state, 0);
        -:  964:			        }
        -:  965:							
        -:  966:		      //draw 4
        -:  967:		          for (j = 0; j < 4; j++)
        -:  968:			        {
        -:  969:			          drawCard(i, state);
        -:  970:			        }
        -:  971:		        }
        -:  972:		      }
        -:  973:	    }
        -:  974:				
        -:  975:	   }
        -:  976:     return 0;
        -:  977:     
        -:  978:      */
        -:  979:		
        -:  980:    case steward:
    #####:  981:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  982:	    {
        -:  983:	      //+2 cards
    #####:  984:	      drawCard(currentPlayer, state);
call    0 never executed
    #####:  985:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  986:	    }
    #####:  987:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  988:	    {
        -:  989:	      //+2 coins
    #####:  990:	      state->coins = state->coins + 2;
        -:  991:	    }
        -:  992:      else
        -:  993:	    {
        -:  994:	      //trash 2 cards in hand
    #####:  995:	      discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  996:	      discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  997:	    }
        -:  998:			
        -:  999:      //discard card from hand
    #####: 1000:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case tribute:
    #####: 1004:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1005:	      if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1006:	        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	        state->deckCount[nextPlayer]--;
        -: 1008:	      }
    #####: 1009:	      else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1010:	        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1011:	        state->discardCount[nextPlayer]--;
        -: 1012:	      }
        -: 1013:	      else{
        -: 1014:	      //No Card to Reveal
        -: 1015:	        if (DEBUG){
        -: 1016:	          printf("No cards to reveal\n");
        -: 1017:	        }
        -: 1018:	      }
        -: 1019:      }
        -: 1020:	    
        -: 1021:      else{
    #####: 1022:	      if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1023:	        for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1024:	          state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1025:	          state->deckCount[nextPlayer]++;
    #####: 1026:	          state->discard[nextPlayer][i] = -1;
    #####: 1027:	          state->discardCount[nextPlayer]--;
        -: 1028:	        }
        -: 1029:			    
    #####: 1030:	      shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1031:	      }
    #####: 1032:	      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:	      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1034:	      state->deckCount[nextPlayer]--;
    #####: 1035:	      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	      state->deckCount[nextPlayer]--;
        -: 1038:      }    
        -: 1039:		       
    #####: 1040:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1041:	      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1042:	      state->playedCardCount++;
    #####: 1043:	      tributeRevealedCards[1] = -1;
        -: 1044:      }
        -: 1045:
    #####: 1046:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1047:	      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1048:	        state->coins += 2;
        -: 1049:	      }
        -: 1050:		    
    #####: 1051:	      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1052:	        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1053:	        drawCard(currentPlayer, state);
call    0 never executed
        -: 1054:	      }
        -: 1055:	      else{//Action Card
    #####: 1056:	        state->numActions = state->numActions + 2;
        -: 1057:	      }
        -: 1058:      }
        -: 1059:	    
    #####: 1060:      return 0;
        -: 1061:		
        -: 1062:    case ambassador:
    #####: 1063:      j = 0;		//used to check if player has enough cards to discard
        -: 1064:
    #####: 1065:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1066:	    {
    #####: 1067:	        return -1;				
        -: 1068:	    }
        -: 1069:
    #####: 1070:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1071:	    {
    #####: 1072:	       return -1;
        -: 1073:	    }
        -: 1074:
    #####: 1075:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1076:	    {
    #####: 1077:	      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1078:	      {
    #####: 1079:	        j++;
        -: 1080:	      }
        -: 1081:	    }
    #####: 1082:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1083:	    {
    #####: 1084:	      return -1;				
        -: 1085:	    }
        -: 1086:
        -: 1087:      if (DEBUG) 
        -: 1088:	      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1089:
        -: 1090:      //increase supply count for choosen card by amount being discarded
    #####: 1091:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1092:			
        -: 1093:      //each other player gains a copy of revealed card
    #####: 1094:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1095:	    {
    #####: 1096:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1097:	      {
    #####: 1098:	        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1099:	      }
        -: 1100:	    }
        -: 1101:
        -: 1102:      //discard played card from hand
    #####: 1103:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1104:
        -: 1105:      //trash copies of cards returned to supply
    #####: 1106:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1107:	      {
    #####: 1108:	        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	        {
    #####: 1110:	          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1111:		        {
    #####: 1112:		          discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1113:		          break;
        -: 1114:		        }
        -: 1115:	        }
        -: 1116:	      }			
        -: 1117:
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case cutpurse:
        -: 1121:
    #####: 1122:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1123:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1124:	    {
    #####: 1125:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1126:	      {
    #####: 1127:	        for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1128:		      {
    #####: 1129:		        if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1130:		        {
    #####: 1131:		          discardCard(j, i, state, 0);
call    0 never executed
    #####: 1132:		          break;
        -: 1133:		        }
    #####: 1134:		        if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1135:		        {
    #####: 1136:		          for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1137:			        {
        -: 1138:			          if (DEBUG)
        -: 1139:			          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1140:			        }	
    #####: 1141:		          break;
        -: 1142:		        }		
        -: 1143:		      }
        -: 1144:					
        -: 1145:	      }
        -: 1146:				
        -: 1147:	    }				
        -: 1148:
        -: 1149:      //discard played card from hand
    #####: 1150:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1151:
    #####: 1152:      return 0;
        -: 1153:
        -: 1154:		
        -: 1155:    case embargo: 
        -: 1156:      //+2 Coins
    #####: 1157:      state->coins = state->coins + 2;
        -: 1158:			
        -: 1159:      //see if selected pile is in play
    #####: 1160:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1161:	    {
    #####: 1162:	        return -1;
        -: 1163:	    }
        -: 1164:			
        -: 1165:      //add embargo token to selected supply pile
    #####: 1166:      state->embargoTokens[choice1]++;
        -: 1167:			
        -: 1168:      //trash card
    #####: 1169:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1170:      return 0;
        -: 1171:		
        -: 1172:    case outpost: ;
        1: 1173:      int outpostReturn = outpostFunc(state, handPos, currentPlayer);
call    0 returned 100%
        1: 1174:      return outpostReturn;
        -: 1175:      break;
        -: 1176:      
        -: 1177:      /*Original outpost code in case I need it again
        -: 1178:      //set outpost flag
        -: 1179:      state->outpostPlayed++;
        -: 1180:			
        -: 1181:      //discard card
        -: 1182:      discardCard(handPos, currentPlayer, state, 0);
        -: 1183:      return 0;
        -: 1184:		  */
        -: 1185:		
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:			
    #####: 1190:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1191:	    {
        -: 1192:	      //gain coins equal to trashed card
    #####: 1193:	      state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1194:	      //trash card
    #####: 1195:	      discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1196:	    }
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1204:	      if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1205:	        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:	        state->discardCount[i]++;
    #####: 1207:	        state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	      }
        -: 1209:      }
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1216:	    {
    #####: 1217:	      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1218:	      {
    #####: 1219:	        index = i;
    #####: 1220:	        break;
        -: 1221:	      }
        -: 1222:	    }
    #####: 1223:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1224:	    {
        -: 1225:	      //trash both treasure cards
    #####: 1226:	      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1227:	      discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1228:
        -: 1229:	      //gain 4 Gold cards
    #####: 1230:	      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1231:	        {
    #####: 1232:	        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1233:	        }
        -: 1234:				
        -: 1235:	      //return success
    #####: 1236:	      return 1;
        -: 1237:	    }
        -: 1238:			
        -: 1239:      //no second treasure_map found in hand
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:	
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
        -: 1246:/*I am putting the following refactored cardEffect functions in this location (prototypes in dominion_helper.h)!!!!
        -: 1247:I have also introduced the following bugs into the code, written after the colon
        -: 1248:-Smithy: Draw 4 cards instead of 3
        -: 1249:-Village: Draw 2 cards instead of 1, as in the case of an accidental extra copypaste of a function call that happens sometimes...
        -: 1250:-Minion: flip flopped choice 1 and choice 2 branches so their functions should be reversed of what they say they should do!
        -: 1251:-Adventurer: Removed "-1" after "cardDrawn = state->hand[currentPlayer][state->handcount[currentPlayer]-1]" and added "-2"
        -: 1252:so that the top card is no longer checked and instead the second to top card is checked for the next statement.
        -: 1253:!!!!The adventurer BUG that I introduced will cause a segmentation fault if the hand doesn't have 2 cards in it!!!
        -: 1254:-outpost: No bugs added as it was the fifth card I refactored
        -: 1255:
        -: 1256:Using this template to pass:
        -: 1257:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -: 1258:*/
        -: 1259:
function smithyFunc called 1 returned 100% blocks executed 100%
        1: 1260:int smithyFunc(struct gameState *state, int handPos, int currentPlayer){
        -: 1261:      int i;
        -: 1262:      //+3 Cards (originally went from i = 0; i < 3)
        5: 1263:      for (i = 0; i < 4; i++)//changed to i<4 so now 4 cards will be drawn instead of 3 cards
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1264:	    {
        4: 1265:	      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1266:	    }
        -: 1267:			
        -: 1268:      //discard card from hand
        1: 1269:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1270:      return 0;
        -: 1271:}
        -: 1272:
function villageFunc called 1 returned 100% blocks executed 100%
        1: 1273:int villageFunc(struct gameState *state, int handPos, int *bonus, int currentPlayer){
        -: 1274:  
        -: 1275:      //+1 Card
        1: 1276:      drawCard(currentPlayer, state);
call    0 returned 100%
        1: 1277:      drawCard(currentPlayer, state); //BUG: extra drawCard, could happen if a dev uses copy paste twice on accident
call    0 returned 100%
        -: 1278:			
        -: 1279:      //+2 Actions
        1: 1280:      state->numActions = state->numActions + 2;
        -: 1281:			
        -: 1282:      //discard played card from hand
        1: 1283:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1284:      return 0;
        -: 1285:}
        -: 1286:
function minionFunc called 0 returned 0% blocks executed 0%
    #####: 1287:int minionFunc(int choice1, int choice2, struct gameState *state, int handPos, int currentPlayer, int i, int j){
        -: 1288:      //+1 action
    #####: 1289:      state->numActions++;
        -: 1290:			
        -: 1291:      //discard card from hand
    #####: 1292:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1293:			
        -: 1294:			//BUG: Flip flopped choice1 with choice 2 here!!
    #####: 1295:      if (choice2)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1296:	    {
    #####: 1297:	      state->coins = state->coins + 2;
        -: 1298:	    }
        -: 1299:			
        -: 1300:			//BUG: Flip flopped choice2 with choice 1 here!!!
    #####: 1301:      else if (choice1)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1302:	      {
        -: 1303:	        //discard hand
    #####: 1304:	      while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1305:	        {
    #####: 1306:	          discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1307:	        }
        -: 1308:				
        -: 1309:	      //draw 4
    #####: 1310:	      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1311:	        {
    #####: 1312:	          drawCard(currentPlayer, state);
call    0 never executed
        -: 1313:	        }
        -: 1314:				
        -: 1315:	      //other players discard hand and redraw if hand size > 4
    #####: 1316:	      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1317:	      {
    #####: 1318:	        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1319:		      {
    #####: 1320:		        if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1321:		        {
        -: 1322:		        //discard hand
    #####: 1323:		          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1324:			        {
    #####: 1325:			          discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1326:			        }
        -: 1327:							
        -: 1328:		      //draw 4
    #####: 1329:		          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1330:			        {
    #####: 1331:			          drawCard(i, state);
call    0 never executed
        -: 1332:			        }
        -: 1333:		        }
        -: 1334:		      }
        -: 1335:	    }
        -: 1336:				
        -: 1337:	   }
    #####: 1338:     return 0;
        -: 1339:}
        -: 1340:
function adventurerFunc called 3 returned 100% blocks executed 100%
        3: 1341:int adventurerFunc(struct gameState *state, int z, int drawntreasure, int currentPlayer,int temphand[], int handPos){
        -: 1342:      int cardDrawn;
        -: 1343:      
       26: 1344:      while(drawntreasure<2){
branch  0 taken 87%
branch  1 taken 13% (fallthrough)
       20: 1345:	        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        8: 1346:	        shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1347:	        }
        -: 1348:	      
       20: 1349:	      drawCard(currentPlayer, state);                            //BUG!!:changed -1 to -2 here. Should get second to top card
call    0 returned 100%
       20: 1350:	      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-2];//top card of hand is most recently drawn card. (now second to top card)
        -: 1351:	      
       20: 1352:	      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        6: 1353:	          drawntreasure++;
        -: 1354:	      }
        -: 1355:	      else{
       14: 1356:	        temphand[z]=cardDrawn;
       14: 1357:	        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       14: 1358:	        z++;
        -: 1359:	      }
        -: 1360:	      
        -: 1361:      }
       20: 1362:      while(z-1>=0){
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
       14: 1363:	      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       14: 1364:	      z=z-1;
        -: 1365:      }
        -: 1366:      
        -: 1367:      //discard card is gone that is a bug that I didn't introduce!!!      
        -: 1368:
        3: 1369:      return 0;
        -: 1370:  
        -: 1371:  
        -: 1372:}
        -: 1373:
function outpostFunc called 1 returned 100% blocks executed 100%
        1: 1374:int outpostFunc(struct gameState *state, int handPos, int currentPlayer){
        -: 1375:        //set outpost flag
        1: 1376:      state->outpostPlayed++;
        -: 1377:			
        -: 1378:      //discard card
        1: 1379:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1380:      return 0;
        -: 1381:  
        -: 1382:}
        -: 1383:
        -: 1384:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1385:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag){
        -: 1386:	
        -: 1387:  //if card is not trashed, added to Played pile 
        3: 1388:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1389:    {
        -: 1390:      //add card to played pile
        3: 1391:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1392:      state->playedCardCount++;
        -: 1393:    }
        -: 1394:	
        -: 1395:  //set played card to -1
        3: 1396:  state->hand[currentPlayer][handPos] = -1;
        -: 1397:	
        -: 1398:  //remove card from player's hand
        3: 1399:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1400:    {
        -: 1401:      //reduce number of cards in hand
    #####: 1402:      state->handCount[currentPlayer]--;
        -: 1403:    }
        3: 1404:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1405:    {
        -: 1406:      //reduce number of cards in hand
    #####: 1407:      state->handCount[currentPlayer]--;
        -: 1408:    }
        -: 1409:  else 	
        -: 1410:    {
        -: 1411:      //replace discarded card with last card in hand
        3: 1412:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1413:      //set last card to -1
        3: 1414:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1415:      //reduce number of cards in hand
        3: 1416:      state->handCount[currentPlayer]--;
        -: 1417:    }
        -: 1418:	
        3: 1419:  return 0;
        -: 1420:}
        -: 1421:
function gainCard called 108 returned 100% blocks executed 100%
      108: 1422:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player){
        -: 1423:  //Note: supplyPos is enum of choosen card
        -: 1424:	
        -: 1425:  //check if supply pile is empty (0) or card is not used in game (-1)
      108: 1426:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
        -: 1427:    {
       27: 1428:      return -1;
        -: 1429:    }
        -: 1430:	
        -: 1431:  //added card for [whoseTurn] current player:
        -: 1432:  // toFlag = 0 : add to discard
        -: 1433:  // toFlag = 1 : add to deck
        -: 1434:  // toFlag = 2 : add to hand
        -: 1435:
       81: 1436:  if (toFlag == 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1437:    {
       27: 1438:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       27: 1439:      state->deckCount[player]++;
        -: 1440:    }
       54: 1441:  else if (toFlag == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1442:    {
       27: 1443:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       27: 1444:      state->handCount[player]++;
        -: 1445:    }
        -: 1446:  else
        -: 1447:    {
       27: 1448:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       27: 1449:      state->discardCount[player]++;
        -: 1450:    }
        -: 1451:	
        -: 1452:  //decrease number in supply pile
       81: 1453:  state->supplyCount[supplyPos]--;
        -: 1454:	 
       81: 1455:  return 0;
        -: 1456:}
        -: 1457:
function updateCoins called 1574 returned 100% blocks executed 100%
     1574: 1458:int updateCoins(int player, struct gameState *state, int bonus){
        -: 1459:  int i;
        -: 1460:	
        -: 1461:  //reset coin count
     1574: 1462:  state->coins = 0;
        -: 1463:
        -: 1464:  //add coins for each Treasure card in player's hand
     9444: 1465:  for (i = 0; i < state->handCount[player]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     7870: 1466:      if (state->hand[player][i] == copper){
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     1371: 1467:	      state->coins += 1;
        -: 1468:	    }
     6499: 1469:      else if (state->hand[player][i] == silver){
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
     1369: 1470:	      state->coins += 2;
        -: 1471:	    }
     5130: 1472:      else if (state->hand[player][i] == gold){
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
     1334: 1473:	      state->coins += 3;
        -: 1474:	    }	
        -: 1475:  }	
        -: 1476:
        -: 1477:  //add bonus
     1574: 1478:  state->coins += bonus;
        -: 1479:
     1574: 1480:  return 0;
        -: 1481:}
        -: 1482:
        -: 1483:
        -: 1484://end of dominion.c
        -: 1485:
